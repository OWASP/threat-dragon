name: Deploy to Heroku
concurrency: deploy
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  # threatdragon is the working area on docker hub so use this area
  # owasp/threat-dragon is the final release area so DO NOT use that
  image_name: threatdragon/owasp-threat-dragon
  heroku_app: threatdragon-v2

# for security reasons the github actions are pinned to specific release versions
jobs:
  publish_docker:
    name: publish docker
    runs-on: ubuntu-22.04
    if: github.repository == 'OWASP/threat-dragon'
    steps:
      - name: Checkout
        uses: actions/checkout@v3.4.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.5.0
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v3.3.0
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v4.0.0
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags:  ${{ env.image_name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  deploy:
    name: upload to Heroku
    runs-on: ubuntu-22.04
    needs: [publish_docker]
    # There is an action to build and deploy a heroku app
    # We already built the container though, so why not just re-tag and push
    steps:
      - name: Pull docker image
        run: docker pull ${{ env.image_name }}

      - name: Login to Heroku Registry
        uses: docker/login-action@v2.1.0
        with:
          registry: registry.heroku.com
          username: _
          password: ${{ secrets.HEROKU_API_KEY }}

      - name: Tag Heroku image
        run: docker tag ${{ env.image_name }} registry.heroku.com/${{ env.heroku_app }}/web

      - name: Push to Heroku
        run: docker push registry.heroku.com/${{ env.heroku_app }}/web

      - name: Deploy to Heroku
        run: heroku container:release web --app ${{ env.heroku_app }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

  smoke_tests:
    name: smoke tests
    runs-on: ubuntu-22.04
    needs: [deploy]
    defaults:
      run:
        working-directory: td.vue
    steps:
      - name: Checkout
        uses: actions/checkout@v3.4.0

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3.6.0
        with:
          node-version: '18'

      - name: Cache NPM dir
        uses: actions/cache@v3.3.0
        with:
          path: ~/.pnpm-store
          key: ${{ runner.OS }}-pnpm-cache-server-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-cache-server-

      - name: Install packages
        run: |
          npm i -g pnpm
          pnpm install --frozen-lockfile

      - name: BrowserStack Env Setup
        uses: browserstack/github-actions/setup-env@v1.0.1
        with:
          username:  ${{ secrets.BROWSERSTACK_USERNAME }}
          access-key: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

      - name: Run cross-browser smoke tests
        run: pnpm run test:e2e-smokes

  rollback:
    name: rollback on fail
    runs-on: ubuntu-22.04
    needs: [smoke_tests]
    if: ${{ failure() }}
    steps:
      - name: Rollback
        run: heroku rollback --app ${{ env.heroku_app }}
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
