name: CI pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  image_name: "threatdragon/owasp-threat-dragon:${{ github.sha }}"

# for security reasons the github actions are pinned to specific release versions
jobs:
  server_unit_tests:
    name: server unit tests
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: td.server
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.0

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3.6.0
        with:
          node-version: '18'

      - name: Cache NPM dir
        uses: actions/cache@v3.3.0
        with:
          path: ~/.pnpm-store
          key: ${{ runner.OS }}-pnpm-cache-server-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-cache-server-

      - name: Install packages
        run: |
          npm i -g pnpm
          pnpm install --frozen-lockfile

      - name: lint
        run: npm run lint

      - name: Unit test
        run: npm run test:unit

  site_unit_tests:
    name: site unit tests
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: td.vue
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.0

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3.6.0
        with:
          node-version: '18'

      - name: Cache NPM dir
        uses: actions/cache@v3.3.0
        with:
          path: ~/.pnpm-store
          key: ${{ runner.OS }}-pnpm-cache-server-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-cache-server-

      - name: Install packages
        run: |
          npm i -g pnpm
          pnpm install --frozen-lockfile

      - name: lint
        run: npm run lint

      - name: Unit test
        run: npm run test:unit

  desktop_unit_tests:
    name: desktop unit tests
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: td.vue
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.0

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3.6.0
        with:
          node-version: '18'

      - name: Cache NPM dir
        uses: actions/cache@v3.3.0
        with:
          path: ~/.pnpm-store
          key: ${{ runner.OS }}-pnpm-cache-server-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-cache-server-

      - name: Install packages
        run: |
          npm i -g pnpm
          pnpm install --frozen-lockfile

      - name: lint
        run: npm run lint
  
      - name: Unit test
        run: npm run test:desktop

  build_docker_image:
    name: build docker image
    runs-on: ubuntu-22.04
    needs: [site_unit_tests, server_unit_tests]
    if: github.repository == 'OWASP/threat-dragon'
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.0

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.5.0
        with:
          install: true

      - name: Setup dockerx cache
        uses: actions/cache@v3.3.0
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v4.0.0
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags:  ${{ env.image_name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  e2e_tests:
    name: site e2e tests
    runs-on: ubuntu-22.04
    needs: [build_docker_image]
    defaults:
      run:
        working-directory: td.vue
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.0

      - name: Run Threat Dragon
        run: |
          docker run -d \
            -p 3000:3000 \
            -e GITHUB_CLIENT_ID='${{ secrets.CI_GITHUB_CLIENT_ID }}' \
            -e GITHUB_CLIENT_SECRET='${{ secrets.CI_GITHUB_CLIENT_SECRET }}' \
            -e ENCRYPTION_JWT_REFRESH_SIGNING_KEY='${{ secrets.CI_JWT_REFRESH_SIGNING_KEY }}' \
            -e ENCRYPTION_JWT_SIGNING_KEY='${{ secrets.CI_JWT_SIGNING_KEY }}' \
            -e ENCRYPTION_KEYS='${{ secrets.CI_SESSION_ENCRYPTION_KEYS }}' \
            -e NODE_ENV='development' \
            -e SERVER_API_PROTOCOL='http' \
            ${{ env.image_name }}

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3.6.0
        with:
          node-version: '18'

      - name: Cache NPM dir
        uses: actions/cache@v3.3.0
        with:
          path: ~/.pnpm-store
          key: ${{ runner.OS }}-pnpm-cache-server-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-cache-server-

      - name: Install packages
        run: |
          npm i -g pnpm
          pnpm install --frozen-lockfile

      - name: Run e2e tests
        run: npm run test:e2e-ci

      - name: Upload e2e videos
        uses: actions/upload-artifact@v3
        with:
          name: e2e_vids.zip
          path: td.vue/tests/e2e/videos
        if: ${{ always() }}


  e2e_smokes:
    name: site e2e smokes
    runs-on: ubuntu-22.04
    needs: [build_docker_image]
    defaults:
      run:
        working-directory: td.vue
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.0

      - name: Run Threat Dragon
        run: |
          docker run -d \
            -p 3000:3000 \
            -e GITHUB_CLIENT_ID='${{ secrets.CI_GITHUB_CLIENT_ID }}' \
            -e GITHUB_CLIENT_SECRET='${{ secrets.CI_GITHUB_CLIENT_SECRET }}' \
            -e ENCRYPTION_JWT_REFRESH_SIGNING_KEY='${{ secrets.CI_JWT_REFRESH_SIGNING_KEY }}' \
            -e ENCRYPTION_JWT_SIGNING_KEY='${{ secrets.CI_JWT_SIGNING_KEY }}' \
            -e ENCRYPTION_KEYS='${{ secrets.CI_SESSION_ENCRYPTION_KEYS }}' \
            -e NODE_ENV='development' \
            -e SERVER_API_PROTOCOL='http' \
            ${{ env.image_name }}

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3.6.0
        with:
          node-version: '18'

      - name: Cache NPM dir
        uses: actions/cache@v3.3.0
        with:
          path: ~/.pnpm-store
          key: ${{ runner.OS }}-pnpm-cache-server-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-cache-server-

      - name: Install packages
        run: |
          npm i -g pnpm
          pnpm install --frozen-lockfile

      - name: Run e2e tests
        run: npm run test:e2e-ci-smokes

      - name: Upload e2e videos
        uses: actions/upload-artifact@v3
        with:
          name: e2e_vids.zip
          path: td.vue/tests/e2e/videos
        if: ${{ always() }}

  zap_scan_web:
    name: site zap scan
    runs-on: ubuntu-22.04
    needs: [build_docker_image]
    steps:
      - name: Run Threat Dragon
        run: |
          docker run -d \
            -p 3000:3000 \
            -e GITHUB_CLIENT_ID='${{ secrets.CI_GITHUB_CLIENT_ID }}' \
            -e GITHUB_CLIENT_SECRET='${{ secrets.CI_GITHUB_CLIENT_SECRET }}' \
            -e ENCRYPTION_JWT_REFRESH_SIGNING_KEY='${{ secrets.CI_JWT_REFRESH_SIGNING_KEY }}' \
            -e ENCRYPTION_JWT_SIGNING_KEY='${{ secrets.CI_JWT_SIGNING_KEY }}' \
            -e ENCRYPTION_KEYS='${{ secrets.CI_SESSION_ENCRYPTION_KEYS }}' \
            -e NODE_ENV='development' \
            -e SERVER_API_PROTOCOL='http' \
            ${{ env.image_name }}

      - name: Checkout
        uses: actions/checkout@v3.5.0

      # There's probably a better way of doing this.
      # Not a great idea to chmod 777, even if it's only
      # in a CI runner
      - name: Make report dir
        run: sudo mkdir zap && sudo chmod 0777 zap
        
      - name: ZAP Scan
        run: |
          docker run -v $(pwd):/zap/wrk/:rw \
            -t \
            --network=host \
            owasp/zap2docker-stable \
            zap-baseline.py \
            -t http://localhost:3000 \
            -r zap/report_web.html \
            -a \
            -c .github/workflows/.zap-rules-web.tsv \
            -j

      - name: Upload scan report
        uses: actions/upload-artifact@v3.1.2
        with:
          name: zap_report_web.zip
          path: zap/report_web.html
        if: ${{ always() }}


  zap_scan_docs:
    name: docs zap scan
    runs-on: ubuntu-22.04
    needs: [build_docker_image]
    steps:
      - name: Run Threat Dragon
        run: |
          docker run -d \
            -p 3000:3000 \
            -e GITHUB_CLIENT_ID='${{ secrets.CI_GITHUB_CLIENT_ID }}' \
            -e GITHUB_CLIENT_SECRET='${{ secrets.CI_GITHUB_CLIENT_SECRET }}' \
            -e ENCRYPTION_JWT_REFRESH_SIGNING_KEY='${{ secrets.CI_JWT_REFRESH_SIGNING_KEY }}' \
            -e ENCRYPTION_JWT_SIGNING_KEY='${{ secrets.CI_JWT_SIGNING_KEY }}' \
            -e ENCRYPTION_KEYS='${{ secrets.CI_SESSION_ENCRYPTION_KEYS }}' \
            -e NODE_ENV='development' \
            -e SERVER_API_PROTOCOL='http' \
            ${{ env.image_name }}

      - name: Checkout
        uses: actions/checkout@v3.5.0

      # There's probably a better way of doing this.
      # Not a great idea to chmod 777, even if it's only
      # in a CI runner
      - name: Make report dir
        run: sudo mkdir zap && sudo chmod 0777 zap
        
      - name: ZAP Scan
        run: |
          docker run -v $(pwd):/zap/wrk/:rw \
            -t \
            --network=host \
            owasp/zap2docker-stable \
            zap-baseline.py \
            -t http://localhost:3000/docs \
            -r zap/report_docs.html \
            -a \
            -c .github/workflows/.zap-rules-web.tsv \
            -j

      - name: Upload scan report
        uses: actions/upload-artifact@v3.1.2
        with:
          name: zap_report_docs.zip
          path: zap/report_docs.html
        if: ${{ always() }}


  scan_image_with_trivy:
    name: site trivy scan
    runs-on: ubuntu-22.04
    needs: [build_docker_image]
    steps:
      # Need .trivyignore
      - name: Checkout
        uses: actions/checkout@v3.5.0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.9.1
        with:
          image-ref: '${{ env.image_name }}'
          format: 'table'
          exit-code: 1

  desktop_e2e_tests:
    name: desktop e2e tests
    runs-on: windows-latest
    needs: [desktop_unit_tests, site_unit_tests]
    defaults:
      run:
        working-directory: td.vue
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.0

      # ubuntu does not find this chrome driver
      # so until this is fixed, use only windows-latest
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1.2.1

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3.6.0
        with:
          node-version: '18'

      - name: Cache NPM dir
        uses: actions/cache@v3.3.0
        with:
          path: ~/.pnpm-store
          key: ${{ runner.OS }}-pnpm-cache-server-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-cache-server-

      - name: Install packages
        run: |
          npm i -g pnpm
          pnpm install --frozen-lockfile

      - name: Build application
        # test only so do not publish
        run: npm run build:desktop -- --publish=never

      # works for macos-latest running locally but pipeline times out 
      # so until this is fixed, use only windows-latest
      - name: End to end tests
        run: npm run test:e2e:desktop
