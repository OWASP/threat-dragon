name: CI Pipeline
concurrency: ci_testing
on:
  push:
    branches:
      - 'v2-development'
      - 'v2/*'
jobs:
  server_unit_tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: td.server
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # Create a cache for the npm dependencies to speed up the build
      # https://stackoverflow.com/a/57958803/3033053
      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-npm-cache-server-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-server-

      - name: npm ci
        run: npm ci

      - name: lint
        run: npm run lint

      - name: Unit Test
        run: npm run test:unit

      - name: Upload codecov report
        run: npm run codecov
        if: github.ref == 'refs/heads/v2-development'

  site_unit_tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: td.vue
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: '14'

    - name: Cache NPM dependencies
      uses: actions/cache@v1
      with:
        path: ~/.npm
        key: ${{ runner.OS }}-npm-cache-site-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-npm-cache-site-

      - name: npm ci
        run: npm ci

      - name: lint
        run: npm run lint

      - name: Unit Test
        run: npm run test:unit

      - name: Upload codecov report
        run: npm run codecov
        if: github.ref == 'refs/heads/v2-development'

  
  docker_build_and_publish:
    runs-on: ubuntu-latest
    needs: [site_unit_tests, server_unit_tests]
      registry:
        image: registry:2
        ports:
          - 5000:5000
        volumes:
          - /tmp/docker-registry:/var/lib/registry
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Docker Cache
        id: cache-docker
        uses: actions/cache@v1
        with:
          path: /tmp/docker-registry
          key: ${{ runner.os }}-docker-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Wait for docker registry to be ready
        run: npx wait-on tcp:5000

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build docker image
        run: docker build . -t thing --cache-from=localhost:5000/thing --build-arg BUILDKIT_INLINE_CACHE=1

      - name: Build and Push Docker Image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: steps.cache.outputs.cache-hit != true
          tags: localhost:5000/threat-dragon:latest
          cache-from: type=registry,src=localhost:5000/threat-dragon
          cache-to: type=registry,src=localhost:5000/threat-dragon

  e2e_tests:
    runs-on: ubuntu-latest
    needs: [docker_build_and_publish]
    defaults:
      run:
        working-directory: td.vue
    services:
      threatdragon:
        image: imoshtokill/threat-dragon-dev:ci-latest
        ports:
          - 3000:3000
        env:
          GITHUB_CLIENT_ID: ${{ secrets.CI_GITHUB_CLIENT_ID }}
          GITHUB_CLIENT_SECRET: ${{ secrets.CI_GITHUB_CLIENT_SECRET }}
          ENCRYPTION_JWT_REFRESH_SIGNING_KEY: ${{ secrets.CI_JWT_REFRESH_SIGNING_KEY }}
          ENCRYPTION_JWT_SIGNING_KEY: ${{ secrets.CI_JWT_SIGNING_KEY }}
          ENCRYPTION_KEYS: ${{ secrets.CI_SESSION_ENCRYPTION_KEYS }}
          NODE_ENV: development

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Use Node.js 14.x
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Get latest Firefox
        uses: browser-actions/setup-firefox@latest
        with:
          firefox-version: latest

      - name: Get stable Chrome
        uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable

      - name: npm ci
        run: npm ci

      - name: Run e2e tests
        run: npm run test:e2e-ci

      - name: Upload e2e videos
        uses: actions/upload-artifact@v2
        with:
          name: e2e_vids.zip
          path: td.vue/tests/e2e/videos

  zap_scan_web:
    runs-on: ubuntu-latest
    needs: [docker_build_and_publish]
    services:
      threatdragon:
        image: imoshtokill/threat-dragon-dev:ci-latest
        ports:
          - 3000:3000
        env:
          GITHUB_CLIENT_ID: ${{ secrets.CI_GITHUB_CLIENT_ID }}
          GITHUB_CLIENT_SECRET: ${{ secrets.CI_GITHUB_CLIENT_SECRET }}
          ENCRYPTION_JWT_REFRESH_SIGNING_KEY: ${{ secrets.CI_JWT_REFRESH_SIGNING_KEY }}
          ENCRYPTION_JWT_SIGNING_KEY: ${{ secrets.CI_JWT_SIGNING_KEY }}
          ENCRYPTION_KEYS: ${{ secrets.CI_SESSION_ENCRYPTION_KEYS }}
          NODE_ENV: development
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # There's probably a better way of doing this.
      # Not a great idea to chmod 777, even if it's only
      # in a CI runner
      - name: Make report dir
        run: sudo mkdir zap && sudo chmod 0777 zap
        
      - name: ZAP Scan
        run: |
          docker run -v $(pwd):/zap/wrk/:rw \
            -t \
            --network=host \
            owasp/zap2docker-stable \
            zap-baseline.py \
            -t http://localhost:3000 \
            -r zap/report_web.html \
            -a \
            -c .github/workflows/.zap-rules-web.tsv \
            -j

      - name: Upload scan report
        uses: actions/upload-artifact@v2
        with:
          name: zap_report_web.zip
          path: zap/report_web.html


  zap_scan_docs:
    runs-on: ubuntu-latest
    needs: [docker_build_and_publish]
    services:
      threatdragon:
        image: imoshtokill/threat-dragon-dev:ci-latest
        ports:
          - 3000:3000
        env:
          GITHUB_CLIENT_ID: ${{ secrets.CI_GITHUB_CLIENT_ID }}
          GITHUB_CLIENT_SECRET: ${{ secrets.CI_GITHUB_CLIENT_SECRET }}
          ENCRYPTION_JWT_REFRESH_SIGNING_KEY: ${{ secrets.CI_JWT_REFRESH_SIGNING_KEY }}
          ENCRYPTION_JWT_SIGNING_KEY: ${{ secrets.CI_JWT_SIGNING_KEY }}
          ENCRYPTION_KEYS: ${{ secrets.CI_SESSION_ENCRYPTION_KEYS }}
          NODE_ENV: development
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # There's probably a better way of doing this.
      # Not a great idea to chmod 777, even if it's only
      # in a CI runner
      - name: Make report dir
        run: sudo mkdir zap && sudo chmod 0777 zap
        
      - name: ZAP Scan
        run: |
          docker run -v $(pwd):/zap/wrk/:rw \
            -t \
            --network=host \
            owasp/zap2docker-stable \
            zap-baseline.py \
            -t http://localhost:3000/docs \
            -r zap/report_docs.html \
            -a \
            -c .github/workflows/.zap-rules-web.tsv \
            -j

      - name: Upload scan report
        uses: actions/upload-artifact@v2
        with:
          name: zap_report_docs.zip
          path: zap/report_docs.html

  deploy_heroku:
    runs-on: ubuntu-latest
    needs: [zap_scan_docs, zap_scan_web, e2e_tests]
    if: github.ref == 'refs/heads/v2-development'
    # There is an action to build and deploy a heroku app
    # We already built the container though, so why not just re-tag and push
    steps:
      - name: Pull docker image
        run: docker pull imoshtokill/threat-dragon-dev:ci-latest

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: registry.heroku.com
          username: _
          password: ${{ secrets.HEROKU_API_KEY }}

      - name: Tag Heroku image
        run: docker tag imoshtokill/threat-dragon-dev:ci-latest registry.heroku.com/threatdragon-v2/web

      - name: Push to Heroku
        run: docker push registry.heroku.com/threatdragon-v2/web

      - name: Deploy to Heroku
        run: heroku container:release web --app threatdragon-v2
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
